/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Views;

import Controller.Controller;
import SoTP.*;
import java.awt.Color;
import java.util.LinkedList;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.SwingConstants;
/**
 *
 * @author nathanbispo
 */
public class ViewMenu extends javax.swing.JFrame {
    Controller controller = new Controller();
    private int tempoTotal = 0;
    private int tempoTotalSJF = 0;
    private boolean instanciaSJF = false;
    private boolean instanciaRR = false;
    private boolean instanciaPRI = false;
    
    /**
     * Creates new form view
     */
    public ViewMenu() {
        initComponents();
        setLocationRelativeTo(null); 
        tempoTotal=0;
        
        painelFCFS.setVisible(false);
        painelSJF.setVisible(false);
        painelRR.setVisible(false);
        painelPRI.setVisible(false);
        
        avancarBOTAOfcfs.setEnabled(false);
        avancarBOTAOsjf.setEnabled(false);
        avancarBOTAOrr.setEnabled(false);
        avancarBOTAOpri.setEnabled(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        fcfsBotao = new javax.swing.JButton();
        sjfBotao = new javax.swing.JButton();
        prioridadeBotao = new javax.swing.JButton();
        roundRobinBotao = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        painelFCFS = new javax.swing.JPanel();
        tempoDeExecucaoTEXT = new javax.swing.JTextField();
        tempoDeExecucaoLABELfcfs = new javax.swing.JLabel();
        tipoDeProcessoLABELfcfs = new javax.swing.JLabel();
        cpuRADIOfcfs = new javax.swing.JRadioButton();
        ioRADIOfcfs = new javax.swing.JRadioButton();
        adicionarBOTAOfcfs = new javax.swing.JButton();
        removerBOTAOfcfs = new javax.swing.JButton();
        listaSugeridaBOTAOfcfs = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabelaProcessosFCFS = new javax.swing.JTable();
        tempoTotalDeExecucaoLABELfcfs = new javax.swing.JLabel();
        tempoDeExecucaoLABEL2fcfs = new javax.swing.JLabel();
        processoFinalizadoTEXTOfcfs = new javax.swing.JLabel();
        avancarBOTAOfcfs = new javax.swing.JButton();
        tempoDeExecucaoTEXTOafcfs = new javax.swing.JLabel();
        processoFinalizadoTEXTO1fcfs = new javax.swing.JLabel();
        voltarBOTARfcfs = new javax.swing.JButton();
        tempoDeExecucaoTEXTOfcfs = new javax.swing.JLabel();
        painelSJF = new javax.swing.JPanel();
        tempoDeExecucaoTEXTsjf = new javax.swing.JTextField();
        tempoDeExecucaoLABELsjf = new javax.swing.JLabel();
        tipoDeProcessoLABELsjf = new javax.swing.JLabel();
        cpuRADIOsjf = new javax.swing.JRadioButton();
        ioRADIOsjf = new javax.swing.JRadioButton();
        adicionarBOTAOsjf = new javax.swing.JButton();
        removerBOTAOsjf = new javax.swing.JButton();
        listaSugeridaBOTAOsjf = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tabelaProcessosPRONTOSsjf = new javax.swing.JTable();
        tempoTotalDeExecucaoLABELsjf = new javax.swing.JLabel();
        tempoTotalDeExecucaoSJF = new javax.swing.JLabel();
        processoFinalizadoTEXTOsjf = new javax.swing.JLabel();
        avancarBOTAOsjf = new javax.swing.JButton();
        tempoDeExecucaoTEXTOasjf = new javax.swing.JLabel();
        processoFinalizadoTEXTO1sjf = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tabelaProcessosBLOQUEADOSsjf = new javax.swing.JTable();
        quantumTEXTOsjf = new javax.swing.JLabel();
        quantumSJF = new javax.swing.JSpinner();
        voltarBOTAOsjf = new javax.swing.JButton();
        tempoTotalDeExecucaoLABELpri5 = new javax.swing.JLabel();
        tempoTotalDeExecucaoLABELpri6 = new javax.swing.JLabel();
        tempoRespostaTEXTOsjf = new javax.swing.JLabel();
        painelRR = new javax.swing.JPanel();
        tempoDeExecucaoTEXTrb = new javax.swing.JTextField();
        tempoDeExecucaoLABELrr = new javax.swing.JLabel();
        tipoDeProcessoLABELrr = new javax.swing.JLabel();
        cpuRADIOrr = new javax.swing.JRadioButton();
        ioRADIOrr = new javax.swing.JRadioButton();
        adicionarBOTAOrr = new javax.swing.JButton();
        removerBOTAOrr = new javax.swing.JButton();
        listaSugeridaBOTAOrr = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        tabelaProcessosPRONTOSrr = new javax.swing.JTable();
        tempoTotalDeExecucaoLABELrr = new javax.swing.JLabel();
        tempoTotalDeExecucaoRR = new javax.swing.JLabel();
        processoFinalizadoTEXTOrr = new javax.swing.JLabel();
        avancarBOTAOrr = new javax.swing.JButton();
        tempoDeExecucaoTEXTOrr = new javax.swing.JLabel();
        processoFinalizadoTEXTO1rr = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        tabelaProcessosBLOQUEADOSrr = new javax.swing.JTable();
        quantumTEXTOrr = new javax.swing.JLabel();
        quantumRR = new javax.swing.JSpinner();
        voltarBOTAOrr = new javax.swing.JButton();
        tempoTotalDeExecucaoLABELpri3 = new javax.swing.JLabel();
        tempoTotalDeExecucaoLABELpri4 = new javax.swing.JLabel();
        tempoRespostaTEXTOrr = new javax.swing.JLabel();
        painelPRI = new javax.swing.JPanel();
        tempoDeExecucaoTEXTpri = new javax.swing.JTextField();
        tempoDeExecucaoLABELpri = new javax.swing.JLabel();
        tipoDeProcessoLABELpri = new javax.swing.JLabel();
        cpuRADIOpri = new javax.swing.JRadioButton();
        ioRADIOpri = new javax.swing.JRadioButton();
        adicionarBOTAOpri = new javax.swing.JButton();
        listaSugeridaBOTAOpri = new javax.swing.JButton();
        jScrollPane8 = new javax.swing.JScrollPane();
        tabelaProcessosPRONTOSpri = new javax.swing.JTable();
        tempoTotalDeExecucaoLABELpri = new javax.swing.JLabel();
        tempoTotalDeExecucaoPRI = new javax.swing.JLabel();
        avancarBOTAOpri = new javax.swing.JButton();
        jScrollPane9 = new javax.swing.JScrollPane();
        tabelaProcessosBLOQUEADOSpri = new javax.swing.JTable();
        quantumTEXTOpri = new javax.swing.JLabel();
        quantumPRI = new javax.swing.JSpinner();
        voltarBOTAOpri = new javax.swing.JButton();
        quantumTEXTOpri1 = new javax.swing.JLabel();
        priRADIO0 = new javax.swing.JRadioButton();
        priRADIO1 = new javax.swing.JRadioButton();
        priRADIO2 = new javax.swing.JRadioButton();
        priRADIO3 = new javax.swing.JRadioButton();
        tempoTotalDeExecucaoLABELpri1 = new javax.swing.JLabel();
        tempoTotalDeExecucaoLABELpri2 = new javax.swing.JLabel();

        jButton1.setText("jButton1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(255, 255, 255));

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));

        fcfsBotao.setBackground(new java.awt.Color(0, 151, 230));
        fcfsBotao.setFont(new java.awt.Font("Noto Sans", 1, 18)); // NOI18N
        fcfsBotao.setForeground(new java.awt.Color(255, 255, 255));
        fcfsBotao.setText("FCFS");
        fcfsBotao.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        fcfsBotao.setBorderPainted(false);
        fcfsBotao.setVerifyInputWhenFocusTarget(false);
        fcfsBotao.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fcfsBotaoActionPerformed(evt);
            }
        });

        sjfBotao.setBackground(new java.awt.Color(0, 151, 230));
        sjfBotao.setFont(new java.awt.Font("Noto Sans", 1, 18)); // NOI18N
        sjfBotao.setForeground(new java.awt.Color(255, 255, 255));
        sjfBotao.setText("SJF");
        sjfBotao.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        sjfBotao.setBorderPainted(false);
        sjfBotao.setVerifyInputWhenFocusTarget(false);
        sjfBotao.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sjfBotaoActionPerformed(evt);
            }
        });

        prioridadeBotao.setBackground(new java.awt.Color(0, 151, 230));
        prioridadeBotao.setFont(new java.awt.Font("Noto Sans", 1, 18)); // NOI18N
        prioridadeBotao.setForeground(new java.awt.Color(255, 255, 255));
        prioridadeBotao.setText("PRIORIDADE");
        prioridadeBotao.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        prioridadeBotao.setBorderPainted(false);
        prioridadeBotao.setVerifyInputWhenFocusTarget(false);
        prioridadeBotao.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                prioridadeBotaoActionPerformed(evt);
            }
        });

        roundRobinBotao.setBackground(new java.awt.Color(0, 151, 230));
        roundRobinBotao.setFont(new java.awt.Font("Noto Sans", 1, 18)); // NOI18N
        roundRobinBotao.setForeground(new java.awt.Color(255, 255, 255));
        roundRobinBotao.setText("ROUND ROBIN");
        roundRobinBotao.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        roundRobinBotao.setBorderPainted(false);
        roundRobinBotao.setVerifyInputWhenFocusTarget(false);
        roundRobinBotao.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                roundRobinBotaoActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Noto Sans", 1, 24)); // NOI18N
        jLabel1.setText("SIMULADOR DE ESCALONADOR DE PROCESSOS");

        painelFCFS.setBackground(new java.awt.Color(255, 255, 255));

        tempoDeExecucaoTEXT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tempoDeExecucaoTEXTActionPerformed(evt);
            }
        });

        tempoDeExecucaoLABELfcfs.setFont(new java.awt.Font("Noto Sans", 1, 20)); // NOI18N
        tempoDeExecucaoLABELfcfs.setText("Tempo de Execução");

        tipoDeProcessoLABELfcfs.setFont(new java.awt.Font("Noto Sans", 0, 24)); // NOI18N
        tipoDeProcessoLABELfcfs.setText("Tipo de processo");

        cpuRADIOfcfs.setText("CPU");
        cpuRADIOfcfs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cpuRADIOfcfsActionPerformed(evt);
            }
        });

        ioRADIOfcfs.setText("IO");
        ioRADIOfcfs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ioRADIOfcfsActionPerformed(evt);
            }
        });

        adicionarBOTAOfcfs.setBackground(new java.awt.Color(0, 255, 0));
        adicionarBOTAOfcfs.setFont(new java.awt.Font("Noto Sans", 1, 12)); // NOI18N
        adicionarBOTAOfcfs.setForeground(new java.awt.Color(255, 255, 255));
        adicionarBOTAOfcfs.setText("Adicionar");
        adicionarBOTAOfcfs.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        adicionarBOTAOfcfs.setBorderPainted(false);
        adicionarBOTAOfcfs.setVerifyInputWhenFocusTarget(false);
        adicionarBOTAOfcfs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                adicionarBOTAOfcfsActionPerformed(evt);
            }
        });

        removerBOTAOfcfs.setBackground(new java.awt.Color(255, 0, 0));
        removerBOTAOfcfs.setFont(new java.awt.Font("Noto Sans", 1, 12)); // NOI18N
        removerBOTAOfcfs.setForeground(new java.awt.Color(255, 255, 255));
        removerBOTAOfcfs.setText("Remover");
        removerBOTAOfcfs.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        removerBOTAOfcfs.setBorderPainted(false);
        removerBOTAOfcfs.setVerifyInputWhenFocusTarget(false);
        removerBOTAOfcfs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removerBOTAOfcfsActionPerformed(evt);
            }
        });

        listaSugeridaBOTAOfcfs.setBackground(new java.awt.Color(0, 191, 255));
        listaSugeridaBOTAOfcfs.setFont(new java.awt.Font("Noto Sans", 1, 12)); // NOI18N
        listaSugeridaBOTAOfcfs.setForeground(new java.awt.Color(255, 255, 255));
        listaSugeridaBOTAOfcfs.setText("Usar lista sugerida");
        listaSugeridaBOTAOfcfs.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        listaSugeridaBOTAOfcfs.setBorderPainted(false);
        listaSugeridaBOTAOfcfs.setVerifyInputWhenFocusTarget(false);
        listaSugeridaBOTAOfcfs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                listaSugeridaBOTAOfcfsActionPerformed(evt);
            }
        });

        tabelaProcessosFCFS.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Nome", "Tempo", "Tipo", "Tempo de Espera"
            }
        ));
        jScrollPane1.setViewportView(tabelaProcessosFCFS);

        tempoTotalDeExecucaoLABELfcfs.setFont(new java.awt.Font("Noto Sans", 1, 18)); // NOI18N
        tempoTotalDeExecucaoLABELfcfs.setText("Tempo Total de Execução: ");

        tempoDeExecucaoLABEL2fcfs.setFont(new java.awt.Font("Noto Sans", 1, 24)); // NOI18N
        tempoDeExecucaoLABEL2fcfs.setText("0");

        processoFinalizadoTEXTOfcfs.setFont(new java.awt.Font("Noto Sans", 0, 18)); // NOI18N
        processoFinalizadoTEXTOfcfs.setText("Nome:");

        avancarBOTAOfcfs.setBackground(new java.awt.Color(0, 128, 128));
        avancarBOTAOfcfs.setFont(new java.awt.Font("Noto Sans", 1, 24)); // NOI18N
        avancarBOTAOfcfs.setForeground(new java.awt.Color(255, 255, 255));
        avancarBOTAOfcfs.setText("Avançar");
        avancarBOTAOfcfs.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        avancarBOTAOfcfs.setBorderPainted(false);
        avancarBOTAOfcfs.setVerifyInputWhenFocusTarget(false);
        avancarBOTAOfcfs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                avancarBOTAOfcfsActionPerformed(evt);
            }
        });

        tempoDeExecucaoTEXTOafcfs.setFont(new java.awt.Font("Noto Sans", 0, 18)); // NOI18N
        tempoDeExecucaoTEXTOafcfs.setText("Tempo de Execução:");

        processoFinalizadoTEXTO1fcfs.setFont(new java.awt.Font("Noto Sans", 1, 18)); // NOI18N
        processoFinalizadoTEXTO1fcfs.setText("Processo finalizado:");

        voltarBOTARfcfs.setBackground(new java.awt.Color(44, 62, 80));
        voltarBOTARfcfs.setFont(new java.awt.Font("Noto Sans", 1, 12)); // NOI18N
        voltarBOTARfcfs.setForeground(new java.awt.Color(255, 255, 255));
        voltarBOTARfcfs.setText("VOLTAR");
        voltarBOTARfcfs.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        voltarBOTARfcfs.setBorderPainted(false);
        voltarBOTARfcfs.setVerifyInputWhenFocusTarget(false);
        voltarBOTARfcfs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                voltarBOTARfcfsActionPerformed(evt);
            }
        });

        tempoDeExecucaoTEXTOfcfs.setFont(new java.awt.Font("Noto Sans", 0, 18)); // NOI18N
        tempoDeExecucaoTEXTOfcfs.setText("Tempo Execução:");

        javax.swing.GroupLayout painelFCFSLayout = new javax.swing.GroupLayout(painelFCFS);
        painelFCFS.setLayout(painelFCFSLayout);
        painelFCFSLayout.setHorizontalGroup(
            painelFCFSLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painelFCFSLayout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addGroup(painelFCFSLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(tempoDeExecucaoTEXT, javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, painelFCFSLayout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addGroup(painelFCFSLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(cpuRADIOfcfs)
                            .addComponent(tipoDeProcessoLABELfcfs)
                            .addComponent(ioRADIOfcfs)
                            .addGroup(painelFCFSLayout.createSequentialGroup()
                                .addComponent(adicionarBOTAOfcfs, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(removerBOTAOfcfs, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(listaSugeridaBOTAOfcfs, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(avancarBOTAOfcfs, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(voltarBOTARfcfs, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addComponent(tempoDeExecucaoLABELfcfs, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 108, Short.MAX_VALUE)
                .addGroup(painelFCFSLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(painelFCFSLayout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 427, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(170, 170, 170))
                    .addGroup(painelFCFSLayout.createSequentialGroup()
                        .addGroup(painelFCFSLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(tempoTotalDeExecucaoLABELfcfs, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(tempoDeExecucaoLABEL2fcfs, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(painelFCFSLayout.createSequentialGroup()
                                .addGroup(painelFCFSLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(processoFinalizadoTEXTOfcfs, javax.swing.GroupLayout.PREFERRED_SIZE, 240, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(processoFinalizadoTEXTO1fcfs, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(painelFCFSLayout.createSequentialGroup()
                                        .addComponent(tempoDeExecucaoTEXTOafcfs, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(58, 58, 58)
                                        .addComponent(tempoDeExecucaoTEXTOfcfs, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addContainerGap())))
        );
        painelFCFSLayout.setVerticalGroup(
            painelFCFSLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painelFCFSLayout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addGroup(painelFCFSLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tempoDeExecucaoLABELfcfs)
                    .addComponent(tempoTotalDeExecucaoLABELfcfs))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(painelFCFSLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(painelFCFSLayout.createSequentialGroup()
                        .addComponent(tempoDeExecucaoLABEL2fcfs)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 289, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(painelFCFSLayout.createSequentialGroup()
                        .addComponent(tempoDeExecucaoTEXT, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(tipoDeProcessoLABELfcfs)
                        .addGap(18, 18, 18)
                        .addComponent(cpuRADIOfcfs)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(ioRADIOfcfs)
                        .addGap(18, 18, 18)
                        .addGroup(painelFCFSLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(adicionarBOTAOfcfs, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(removerBOTAOfcfs, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(listaSugeridaBOTAOfcfs, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(avancarBOTAOfcfs, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 24, Short.MAX_VALUE)
                .addGroup(painelFCFSLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, painelFCFSLayout.createSequentialGroup()
                        .addComponent(processoFinalizadoTEXTO1fcfs)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(processoFinalizadoTEXTOfcfs)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, painelFCFSLayout.createSequentialGroup()
                        .addComponent(voltarBOTARfcfs, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(23, 23, 23)))
                .addGroup(painelFCFSLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tempoDeExecucaoTEXTOafcfs)
                    .addComponent(tempoDeExecucaoTEXTOfcfs))
                .addGap(15, 15, 15))
        );

        painelSJF.setBackground(new java.awt.Color(255, 255, 255));

        tempoDeExecucaoTEXTsjf.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tempoDeExecucaoTEXTsjfActionPerformed(evt);
            }
        });

        tempoDeExecucaoLABELsjf.setFont(new java.awt.Font("Noto Sans", 1, 20)); // NOI18N
        tempoDeExecucaoLABELsjf.setText("Tempo de Execução");

        tipoDeProcessoLABELsjf.setFont(new java.awt.Font("Noto Sans", 0, 24)); // NOI18N
        tipoDeProcessoLABELsjf.setText("Tipo de processo");

        cpuRADIOsjf.setText("CPU");
        cpuRADIOsjf.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cpuRADIOsjfActionPerformed(evt);
            }
        });

        ioRADIOsjf.setText("IO");
        ioRADIOsjf.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ioRADIOsjfActionPerformed(evt);
            }
        });

        adicionarBOTAOsjf.setBackground(new java.awt.Color(0, 255, 0));
        adicionarBOTAOsjf.setFont(new java.awt.Font("Noto Sans", 1, 12)); // NOI18N
        adicionarBOTAOsjf.setForeground(new java.awt.Color(255, 255, 255));
        adicionarBOTAOsjf.setText("Adicionar");
        adicionarBOTAOsjf.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        adicionarBOTAOsjf.setBorderPainted(false);
        adicionarBOTAOsjf.setVerifyInputWhenFocusTarget(false);
        adicionarBOTAOsjf.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                adicionarBOTAOsjfActionPerformed(evt);
            }
        });

        removerBOTAOsjf.setBackground(new java.awt.Color(255, 0, 0));
        removerBOTAOsjf.setFont(new java.awt.Font("Noto Sans", 1, 12)); // NOI18N
        removerBOTAOsjf.setForeground(new java.awt.Color(255, 255, 255));
        removerBOTAOsjf.setText("Remover");
        removerBOTAOsjf.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        removerBOTAOsjf.setBorderPainted(false);
        removerBOTAOsjf.setVerifyInputWhenFocusTarget(false);
        removerBOTAOsjf.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removerBOTAOsjfActionPerformed(evt);
            }
        });

        listaSugeridaBOTAOsjf.setBackground(new java.awt.Color(0, 191, 255));
        listaSugeridaBOTAOsjf.setFont(new java.awt.Font("Noto Sans", 1, 12)); // NOI18N
        listaSugeridaBOTAOsjf.setForeground(new java.awt.Color(255, 255, 255));
        listaSugeridaBOTAOsjf.setText("Usar lista sugerida");
        listaSugeridaBOTAOsjf.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        listaSugeridaBOTAOsjf.setBorderPainted(false);
        listaSugeridaBOTAOsjf.setVerifyInputWhenFocusTarget(false);
        listaSugeridaBOTAOsjf.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                listaSugeridaBOTAOsjfActionPerformed(evt);
            }
        });

        tabelaProcessosPRONTOSsjf.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Nome", "Tempo", "Tipo"
            }
        ));
        jScrollPane2.setViewportView(tabelaProcessosPRONTOSsjf);

        tempoTotalDeExecucaoLABELsjf.setFont(new java.awt.Font("Noto Sans", 1, 18)); // NOI18N
        tempoTotalDeExecucaoLABELsjf.setText("Tempo Total de Execução: ");

        tempoTotalDeExecucaoSJF.setFont(new java.awt.Font("Noto Sans", 1, 24)); // NOI18N
        tempoTotalDeExecucaoSJF.setText("0");

        processoFinalizadoTEXTOsjf.setFont(new java.awt.Font("Noto Sans", 0, 18)); // NOI18N
        processoFinalizadoTEXTOsjf.setText("Nome:");

        avancarBOTAOsjf.setBackground(new java.awt.Color(0, 128, 128));
        avancarBOTAOsjf.setFont(new java.awt.Font("Noto Sans", 1, 24)); // NOI18N
        avancarBOTAOsjf.setForeground(new java.awt.Color(255, 255, 255));
        avancarBOTAOsjf.setText("Avançar");
        avancarBOTAOsjf.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        avancarBOTAOsjf.setBorderPainted(false);
        avancarBOTAOsjf.setVerifyInputWhenFocusTarget(false);
        avancarBOTAOsjf.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                avancarBOTAOsjfActionPerformed(evt);
            }
        });

        tempoDeExecucaoTEXTOasjf.setFont(new java.awt.Font("Noto Sans", 0, 18)); // NOI18N
        tempoDeExecucaoTEXTOasjf.setText("Tempo de Execução:");

        processoFinalizadoTEXTO1sjf.setFont(new java.awt.Font("Noto Sans", 1, 18)); // NOI18N
        processoFinalizadoTEXTO1sjf.setText("Processo finalizado:");

        tabelaProcessosBLOQUEADOSsjf.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Nome", "Tempo", "Tipo", "Tempo de Espera"
            }
        ));
        jScrollPane3.setViewportView(tabelaProcessosBLOQUEADOSsjf);

        quantumTEXTOsjf.setFont(new java.awt.Font("Noto Sans", 1, 20)); // NOI18N
        quantumTEXTOsjf.setText("Quantum:");

        quantumSJF.setValue(5);

        voltarBOTAOsjf.setBackground(new java.awt.Color(44, 62, 80));
        voltarBOTAOsjf.setFont(new java.awt.Font("Noto Sans", 1, 12)); // NOI18N
        voltarBOTAOsjf.setForeground(new java.awt.Color(255, 255, 255));
        voltarBOTAOsjf.setText("VOLTAR");
        voltarBOTAOsjf.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        voltarBOTAOsjf.setBorderPainted(false);
        voltarBOTAOsjf.setVerifyInputWhenFocusTarget(false);
        voltarBOTAOsjf.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                voltarBOTAOsjfActionPerformed(evt);
            }
        });

        tempoTotalDeExecucaoLABELpri5.setFont(new java.awt.Font("Noto Sans", 0, 18)); // NOI18N
        tempoTotalDeExecucaoLABELpri5.setText("Processos Bloqueados");

        tempoTotalDeExecucaoLABELpri6.setFont(new java.awt.Font("Noto Sans", 0, 18)); // NOI18N
        tempoTotalDeExecucaoLABELpri6.setText("Processos Prontos");

        tempoRespostaTEXTOsjf.setFont(new java.awt.Font("Noto Sans", 0, 18)); // NOI18N
        tempoRespostaTEXTOsjf.setText("Tempo Resposta:");

        javax.swing.GroupLayout painelSJFLayout = new javax.swing.GroupLayout(painelSJF);
        painelSJF.setLayout(painelSJFLayout);
        painelSJFLayout.setHorizontalGroup(
            painelSJFLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painelSJFLayout.createSequentialGroup()
                .addGroup(painelSJFLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(painelSJFLayout.createSequentialGroup()
                        .addGap(56, 56, 56)
                        .addGroup(painelSJFLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(painelSJFLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(cpuRADIOsjf)
                                .addComponent(tipoDeProcessoLABELsjf)
                                .addComponent(ioRADIOsjf)
                                .addGroup(painelSJFLayout.createSequentialGroup()
                                    .addComponent(adicionarBOTAOsjf, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(removerBOTAOsjf, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addComponent(listaSugeridaBOTAOsjf, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(avancarBOTAOsjf, javax.swing.GroupLayout.PREFERRED_SIZE, 206, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(painelSJFLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(tempoDeExecucaoTEXTsjf, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(tempoDeExecucaoLABELsjf, javax.swing.GroupLayout.DEFAULT_SIZE, 212, Short.MAX_VALUE))
                            .addComponent(voltarBOTAOsjf, javax.swing.GroupLayout.PREFERRED_SIZE, 212, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(painelSJFLayout.createSequentialGroup()
                        .addGap(48, 48, 48)
                        .addComponent(quantumTEXTOsjf)
                        .addGap(45, 45, 45)
                        .addComponent(quantumSJF, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 102, Short.MAX_VALUE)
                .addGroup(painelSJFLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(tempoTotalDeExecucaoLABELsjf, javax.swing.GroupLayout.DEFAULT_SIZE, 591, Short.MAX_VALUE)
                    .addComponent(tempoTotalDeExecucaoSJF, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(processoFinalizadoTEXTOsjf, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(processoFinalizadoTEXTO1sjf, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(painelSJFLayout.createSequentialGroup()
                        .addGroup(painelSJFLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(painelSJFLayout.createSequentialGroup()
                                .addGroup(painelSJFLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(tempoTotalDeExecucaoLABELpri6))
                                .addGap(18, 18, 18)
                                .addGroup(painelSJFLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(tempoTotalDeExecucaoLABELpri5, javax.swing.GroupLayout.PREFERRED_SIZE, 271, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 386, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(painelSJFLayout.createSequentialGroup()
                                .addComponent(tempoDeExecucaoTEXTOasjf, javax.swing.GroupLayout.PREFERRED_SIZE, 259, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(tempoRespostaTEXTOsjf, javax.swing.GroupLayout.PREFERRED_SIZE, 259, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        painelSJFLayout.setVerticalGroup(
            painelSJFLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painelSJFLayout.createSequentialGroup()
                .addGap(52, 52, 52)
                .addComponent(tempoTotalDeExecucaoLABELsjf)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tempoTotalDeExecucaoSJF)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(painelSJFLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(tempoTotalDeExecucaoLABELpri5, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(tempoTotalDeExecucaoLABELpri6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(painelSJFLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 289, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 289, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(processoFinalizadoTEXTO1sjf)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(processoFinalizadoTEXTOsjf)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(painelSJFLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tempoDeExecucaoTEXTOasjf)
                    .addComponent(tempoRespostaTEXTOsjf))
                .addGap(15, 15, 15))
            .addGroup(painelSJFLayout.createSequentialGroup()
                .addGap(60, 60, 60)
                .addGroup(painelSJFLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(quantumTEXTOsjf)
                    .addComponent(quantumSJF, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(tempoDeExecucaoLABELsjf)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tempoDeExecucaoTEXTsjf, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(tipoDeProcessoLABELsjf)
                .addGap(18, 18, 18)
                .addComponent(cpuRADIOsjf)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(ioRADIOsjf)
                .addGap(18, 18, 18)
                .addGroup(painelSJFLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(adicionarBOTAOsjf, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(removerBOTAOsjf, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(listaSugeridaBOTAOsjf, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(avancarBOTAOsjf, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(voltarBOTAOsjf, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        painelRR.setBackground(new java.awt.Color(255, 255, 255));

        tempoDeExecucaoTEXTrb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tempoDeExecucaoTEXTrbActionPerformed(evt);
            }
        });

        tempoDeExecucaoLABELrr.setFont(new java.awt.Font("Noto Sans", 1, 20)); // NOI18N
        tempoDeExecucaoLABELrr.setText("Tempo de Execução");

        tipoDeProcessoLABELrr.setFont(new java.awt.Font("Noto Sans", 0, 24)); // NOI18N
        tipoDeProcessoLABELrr.setText("Tipo de processo");

        cpuRADIOrr.setText("CPU");
        cpuRADIOrr.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cpuRADIOrrActionPerformed(evt);
            }
        });

        ioRADIOrr.setText("IO");
        ioRADIOrr.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ioRADIOrrActionPerformed(evt);
            }
        });

        adicionarBOTAOrr.setBackground(new java.awt.Color(0, 255, 0));
        adicionarBOTAOrr.setFont(new java.awt.Font("Noto Sans", 1, 12)); // NOI18N
        adicionarBOTAOrr.setForeground(new java.awt.Color(255, 255, 255));
        adicionarBOTAOrr.setText("Adicionar");
        adicionarBOTAOrr.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        adicionarBOTAOrr.setBorderPainted(false);
        adicionarBOTAOrr.setVerifyInputWhenFocusTarget(false);
        adicionarBOTAOrr.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                adicionarBOTAOrrActionPerformed(evt);
            }
        });

        removerBOTAOrr.setBackground(new java.awt.Color(255, 0, 0));
        removerBOTAOrr.setFont(new java.awt.Font("Noto Sans", 1, 12)); // NOI18N
        removerBOTAOrr.setForeground(new java.awt.Color(255, 255, 255));
        removerBOTAOrr.setText("Remover");
        removerBOTAOrr.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        removerBOTAOrr.setBorderPainted(false);
        removerBOTAOrr.setVerifyInputWhenFocusTarget(false);
        removerBOTAOrr.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removerBOTAOrrActionPerformed(evt);
            }
        });

        listaSugeridaBOTAOrr.setBackground(new java.awt.Color(0, 191, 255));
        listaSugeridaBOTAOrr.setFont(new java.awt.Font("Noto Sans", 1, 12)); // NOI18N
        listaSugeridaBOTAOrr.setForeground(new java.awt.Color(255, 255, 255));
        listaSugeridaBOTAOrr.setText("Usar lista sugerida");
        listaSugeridaBOTAOrr.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        listaSugeridaBOTAOrr.setBorderPainted(false);
        listaSugeridaBOTAOrr.setVerifyInputWhenFocusTarget(false);
        listaSugeridaBOTAOrr.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                listaSugeridaBOTAOrrActionPerformed(evt);
            }
        });

        tabelaProcessosPRONTOSrr.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Nome", "Tempo", "Tipo"
            }
        ));
        jScrollPane4.setViewportView(tabelaProcessosPRONTOSrr);

        tempoTotalDeExecucaoLABELrr.setFont(new java.awt.Font("Noto Sans", 1, 18)); // NOI18N
        tempoTotalDeExecucaoLABELrr.setText("Tempo Total de Execução: ");

        tempoTotalDeExecucaoRR.setFont(new java.awt.Font("Noto Sans", 1, 24)); // NOI18N
        tempoTotalDeExecucaoRR.setText("0");

        processoFinalizadoTEXTOrr.setFont(new java.awt.Font("Noto Sans", 0, 18)); // NOI18N
        processoFinalizadoTEXTOrr.setText("Nome:");

        avancarBOTAOrr.setBackground(new java.awt.Color(0, 128, 128));
        avancarBOTAOrr.setFont(new java.awt.Font("Noto Sans", 1, 24)); // NOI18N
        avancarBOTAOrr.setForeground(new java.awt.Color(255, 255, 255));
        avancarBOTAOrr.setText("Avançar");
        avancarBOTAOrr.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        avancarBOTAOrr.setBorderPainted(false);
        avancarBOTAOrr.setVerifyInputWhenFocusTarget(false);
        avancarBOTAOrr.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                avancarBOTAOrrActionPerformed(evt);
            }
        });

        tempoDeExecucaoTEXTOrr.setFont(new java.awt.Font("Noto Sans", 0, 18)); // NOI18N
        tempoDeExecucaoTEXTOrr.setText("Tempo de Execução:");

        processoFinalizadoTEXTO1rr.setFont(new java.awt.Font("Noto Sans", 1, 18)); // NOI18N
        processoFinalizadoTEXTO1rr.setText("Processo finalizado:");

        tabelaProcessosBLOQUEADOSrr.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Nome", "Tempo", "Tipo", "Tempo de Espera"
            }
        ));
        jScrollPane5.setViewportView(tabelaProcessosBLOQUEADOSrr);

        quantumTEXTOrr.setFont(new java.awt.Font("Noto Sans", 1, 20)); // NOI18N
        quantumTEXTOrr.setText("Quantum:");

        quantumRR.setValue(5);

        voltarBOTAOrr.setBackground(new java.awt.Color(44, 62, 80));
        voltarBOTAOrr.setFont(new java.awt.Font("Noto Sans", 1, 12)); // NOI18N
        voltarBOTAOrr.setForeground(new java.awt.Color(255, 255, 255));
        voltarBOTAOrr.setText("VOLTAR");
        voltarBOTAOrr.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        voltarBOTAOrr.setBorderPainted(false);
        voltarBOTAOrr.setVerifyInputWhenFocusTarget(false);
        voltarBOTAOrr.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                voltarBOTAOrrActionPerformed(evt);
            }
        });

        tempoTotalDeExecucaoLABELpri3.setFont(new java.awt.Font("Noto Sans", 0, 18)); // NOI18N
        tempoTotalDeExecucaoLABELpri3.setText("Processos Prontos");

        tempoTotalDeExecucaoLABELpri4.setFont(new java.awt.Font("Noto Sans", 0, 18)); // NOI18N
        tempoTotalDeExecucaoLABELpri4.setText("Processos Bloqueados");

        tempoRespostaTEXTOrr.setFont(new java.awt.Font("Noto Sans", 0, 18)); // NOI18N
        tempoRespostaTEXTOrr.setText("Tempo Resposta: ");

        javax.swing.GroupLayout painelRRLayout = new javax.swing.GroupLayout(painelRR);
        painelRR.setLayout(painelRRLayout);
        painelRRLayout.setHorizontalGroup(
            painelRRLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painelRRLayout.createSequentialGroup()
                .addGroup(painelRRLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(painelRRLayout.createSequentialGroup()
                        .addGap(56, 56, 56)
                        .addGroup(painelRRLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(painelRRLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(cpuRADIOrr)
                                .addComponent(tipoDeProcessoLABELrr)
                                .addComponent(ioRADIOrr)
                                .addGroup(painelRRLayout.createSequentialGroup()
                                    .addComponent(adicionarBOTAOrr, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(removerBOTAOrr, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addComponent(listaSugeridaBOTAOrr, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(avancarBOTAOrr, javax.swing.GroupLayout.PREFERRED_SIZE, 206, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(painelRRLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(tempoDeExecucaoTEXTrb, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(tempoDeExecucaoLABELrr, javax.swing.GroupLayout.DEFAULT_SIZE, 212, Short.MAX_VALUE))))
                    .addGroup(painelRRLayout.createSequentialGroup()
                        .addGap(48, 48, 48)
                        .addComponent(quantumTEXTOrr)
                        .addGap(45, 45, 45)
                        .addComponent(quantumRR, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, painelRRLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(voltarBOTAOrr, javax.swing.GroupLayout.PREFERRED_SIZE, 212, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(6, 6, 6)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 102, Short.MAX_VALUE)
                .addGroup(painelRRLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(tempoTotalDeExecucaoLABELrr, javax.swing.GroupLayout.DEFAULT_SIZE, 591, Short.MAX_VALUE)
                    .addComponent(tempoTotalDeExecucaoRR, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(painelRRLayout.createSequentialGroup()
                        .addComponent(tempoDeExecucaoTEXTOrr, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(87, 87, 87)
                        .addComponent(tempoRespostaTEXTOrr, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(66, 66, 66))
                    .addComponent(processoFinalizadoTEXTO1rr, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(painelRRLayout.createSequentialGroup()
                        .addGroup(painelRRLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(painelRRLayout.createSequentialGroup()
                                .addGroup(painelRRLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(tempoTotalDeExecucaoLABELpri3))
                                .addGap(18, 18, 18)
                                .addGroup(painelRRLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(tempoTotalDeExecucaoLABELpri4, javax.swing.GroupLayout.PREFERRED_SIZE, 271, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 386, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(processoFinalizadoTEXTOrr, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 8, Short.MAX_VALUE)))
                .addContainerGap())
        );
        painelRRLayout.setVerticalGroup(
            painelRRLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painelRRLayout.createSequentialGroup()
                .addGap(52, 52, 52)
                .addComponent(tempoTotalDeExecucaoLABELrr)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tempoTotalDeExecucaoRR)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(painelRRLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tempoTotalDeExecucaoLABELpri3)
                    .addComponent(tempoTotalDeExecucaoLABELpri4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(painelRRLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 289, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 289, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(processoFinalizadoTEXTO1rr)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(processoFinalizadoTEXTOrr)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(painelRRLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tempoDeExecucaoTEXTOrr)
                    .addComponent(tempoRespostaTEXTOrr))
                .addGap(15, 15, 15))
            .addGroup(painelRRLayout.createSequentialGroup()
                .addGap(60, 60, 60)
                .addGroup(painelRRLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(quantumTEXTOrr)
                    .addComponent(quantumRR, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(tempoDeExecucaoLABELrr)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tempoDeExecucaoTEXTrb, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(tipoDeProcessoLABELrr)
                .addGap(18, 18, 18)
                .addComponent(cpuRADIOrr)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(ioRADIOrr)
                .addGap(18, 18, 18)
                .addGroup(painelRRLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(adicionarBOTAOrr, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(removerBOTAOrr, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(listaSugeridaBOTAOrr, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(avancarBOTAOrr, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(voltarBOTAOrr, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        painelPRI.setBackground(new java.awt.Color(255, 255, 255));

        tempoDeExecucaoTEXTpri.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tempoDeExecucaoTEXTpriActionPerformed(evt);
            }
        });

        tempoDeExecucaoLABELpri.setFont(new java.awt.Font("Noto Sans", 1, 20)); // NOI18N
        tempoDeExecucaoLABELpri.setText("Tempo de Execução");

        tipoDeProcessoLABELpri.setFont(new java.awt.Font("Noto Sans", 0, 24)); // NOI18N
        tipoDeProcessoLABELpri.setText("Tipo de processo");

        cpuRADIOpri.setText("CPU");
        cpuRADIOpri.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cpuRADIOpriActionPerformed(evt);
            }
        });

        ioRADIOpri.setText("IO");
        ioRADIOpri.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ioRADIOpriActionPerformed(evt);
            }
        });

        adicionarBOTAOpri.setBackground(new java.awt.Color(0, 255, 0));
        adicionarBOTAOpri.setFont(new java.awt.Font("Noto Sans", 1, 12)); // NOI18N
        adicionarBOTAOpri.setForeground(new java.awt.Color(255, 255, 255));
        adicionarBOTAOpri.setText("Adicionar");
        adicionarBOTAOpri.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        adicionarBOTAOpri.setBorderPainted(false);
        adicionarBOTAOpri.setVerifyInputWhenFocusTarget(false);
        adicionarBOTAOpri.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                adicionarBOTAOpriActionPerformed(evt);
            }
        });

        listaSugeridaBOTAOpri.setBackground(new java.awt.Color(0, 191, 255));
        listaSugeridaBOTAOpri.setFont(new java.awt.Font("Noto Sans", 1, 12)); // NOI18N
        listaSugeridaBOTAOpri.setForeground(new java.awt.Color(255, 255, 255));
        listaSugeridaBOTAOpri.setText("Usar lista sugerida");
        listaSugeridaBOTAOpri.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        listaSugeridaBOTAOpri.setBorderPainted(false);
        listaSugeridaBOTAOpri.setVerifyInputWhenFocusTarget(false);
        listaSugeridaBOTAOpri.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                listaSugeridaBOTAOpriActionPerformed(evt);
            }
        });

        tabelaProcessosPRONTOSpri.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Nome", "Tempo", "Tipo", "Prioridade"
            }
        ));
        jScrollPane8.setViewportView(tabelaProcessosPRONTOSpri);

        tempoTotalDeExecucaoLABELpri.setFont(new java.awt.Font("Noto Sans", 1, 18)); // NOI18N
        tempoTotalDeExecucaoLABELpri.setText("Tempo Total de Execução: ");

        tempoTotalDeExecucaoPRI.setFont(new java.awt.Font("Noto Sans", 1, 24)); // NOI18N
        tempoTotalDeExecucaoPRI.setText("0");

        avancarBOTAOpri.setBackground(new java.awt.Color(0, 128, 128));
        avancarBOTAOpri.setFont(new java.awt.Font("Noto Sans", 1, 24)); // NOI18N
        avancarBOTAOpri.setForeground(new java.awt.Color(255, 255, 255));
        avancarBOTAOpri.setText("Avançar");
        avancarBOTAOpri.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        avancarBOTAOpri.setBorderPainted(false);
        avancarBOTAOpri.setVerifyInputWhenFocusTarget(false);
        avancarBOTAOpri.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                avancarBOTAOpriActionPerformed(evt);
            }
        });

        tabelaProcessosBLOQUEADOSpri.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Nome", "Tempo", "Tipo"
            }
        ));
        jScrollPane9.setViewportView(tabelaProcessosBLOQUEADOSpri);

        quantumTEXTOpri.setFont(new java.awt.Font("Noto Sans", 1, 20)); // NOI18N
        quantumTEXTOpri.setText("Quantum:");

        quantumPRI.setValue(5);

        voltarBOTAOpri.setBackground(new java.awt.Color(44, 62, 80));
        voltarBOTAOpri.setFont(new java.awt.Font("Noto Sans", 1, 12)); // NOI18N
        voltarBOTAOpri.setForeground(new java.awt.Color(255, 255, 255));
        voltarBOTAOpri.setText("VOLTAR");
        voltarBOTAOpri.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        voltarBOTAOpri.setBorderPainted(false);
        voltarBOTAOpri.setVerifyInputWhenFocusTarget(false);
        voltarBOTAOpri.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                voltarBOTAOpriActionPerformed(evt);
            }
        });

        quantumTEXTOpri1.setFont(new java.awt.Font("Noto Sans", 1, 20)); // NOI18N
        quantumTEXTOpri1.setText("Prioridade:");

        priRADIO0.setText("0");
        priRADIO0.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                priRADIO0ActionPerformed(evt);
            }
        });

        priRADIO1.setText("1");
        priRADIO1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                priRADIO1ActionPerformed(evt);
            }
        });

        priRADIO2.setText("2");
        priRADIO2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                priRADIO2ActionPerformed(evt);
            }
        });

        priRADIO3.setText("3");
        priRADIO3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                priRADIO3ActionPerformed(evt);
            }
        });

        tempoTotalDeExecucaoLABELpri1.setFont(new java.awt.Font("Noto Sans", 0, 18)); // NOI18N
        tempoTotalDeExecucaoLABELpri1.setText("Processos Bloqueados");

        tempoTotalDeExecucaoLABELpri2.setFont(new java.awt.Font("Noto Sans", 0, 18)); // NOI18N
        tempoTotalDeExecucaoLABELpri2.setText("Processos Prontos");

        javax.swing.GroupLayout painelPRILayout = new javax.swing.GroupLayout(painelPRI);
        painelPRI.setLayout(painelPRILayout);
        painelPRILayout.setHorizontalGroup(
            painelPRILayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painelPRILayout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addGroup(painelPRILayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(painelPRILayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(painelPRILayout.createSequentialGroup()
                            .addComponent(quantumTEXTOpri)
                            .addGap(37, 37, 37)
                            .addComponent(quantumPRI, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(painelPRILayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(cpuRADIOpri)
                            .addComponent(tipoDeProcessoLABELpri)
                            .addComponent(ioRADIOpri)
                            .addComponent(adicionarBOTAOpri, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(listaSugeridaBOTAOpri, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(avancarBOTAOpri, javax.swing.GroupLayout.PREFERRED_SIZE, 206, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(tempoDeExecucaoLABELpri, javax.swing.GroupLayout.PREFERRED_SIZE, 212, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(tempoDeExecucaoTEXTpri, javax.swing.GroupLayout.PREFERRED_SIZE, 212, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(quantumTEXTOpri1)
                        .addGroup(painelPRILayout.createSequentialGroup()
                            .addGap(6, 6, 6)
                            .addComponent(priRADIO0)
                            .addGap(18, 18, 18)
                            .addComponent(priRADIO1)
                            .addGap(18, 18, 18)
                            .addComponent(priRADIO2)
                            .addGap(18, 18, 18)
                            .addComponent(priRADIO3)))
                    .addGroup(painelPRILayout.createSequentialGroup()
                        .addComponent(voltarBOTAOpri, javax.swing.GroupLayout.PREFERRED_SIZE, 212, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(6, 6, 6)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 102, Short.MAX_VALUE)
                .addGroup(painelPRILayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(painelPRILayout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(tempoTotalDeExecucaoLABELpri2, javax.swing.GroupLayout.PREFERRED_SIZE, 271, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(tempoTotalDeExecucaoLABELpri1, javax.swing.GroupLayout.PREFERRED_SIZE, 271, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(tempoTotalDeExecucaoLABELpri, javax.swing.GroupLayout.DEFAULT_SIZE, 591, Short.MAX_VALUE)
                    .addComponent(tempoTotalDeExecucaoPRI, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(painelPRILayout.createSequentialGroup()
                        .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane9, javax.swing.GroupLayout.PREFERRED_SIZE, 265, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 8, Short.MAX_VALUE)))
                .addContainerGap())
        );
        painelPRILayout.setVerticalGroup(
            painelPRILayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painelPRILayout.createSequentialGroup()
                .addGap(52, 52, 52)
                .addComponent(tempoTotalDeExecucaoLABELpri)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tempoTotalDeExecucaoPRI)
                .addGap(15, 15, 15)
                .addGroup(painelPRILayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tempoTotalDeExecucaoLABELpri1)
                    .addComponent(tempoTotalDeExecucaoLABELpri2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(painelPRILayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 289, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane9, javax.swing.GroupLayout.PREFERRED_SIZE, 289, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 51, Short.MAX_VALUE)
                .addComponent(voltarBOTAOpri, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(2, 2, 2))
            .addGroup(painelPRILayout.createSequentialGroup()
                .addGap(60, 60, 60)
                .addGroup(painelPRILayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(quantumTEXTOpri)
                    .addComponent(quantumPRI, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(2, 2, 2)
                .addComponent(quantumTEXTOpri1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(painelPRILayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(priRADIO0)
                    .addComponent(priRADIO1)
                    .addComponent(priRADIO2)
                    .addComponent(priRADIO3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tempoDeExecucaoLABELpri)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(tempoDeExecucaoTEXTpri, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tipoDeProcessoLABELpri)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cpuRADIOpri)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(ioRADIOpri)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(adicionarBOTAOpri, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(listaSugeridaBOTAOpri, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(avancarBOTAOpri, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(64, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap(91, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(painelFCFS, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(38, 38, 38))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(fcfsBotao, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(33, 33, 33)
                                .addComponent(sjfBotao, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(32, 32, 32)
                                .addComponent(prioridadeBotao, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(41, 41, 41)
                                .addComponent(roundRobinBotao, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addGap(140, 140, 140)))
                        .addGap(122, 122, 122))))
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel2Layout.createSequentialGroup()
                    .addGap(64, 64, 64)
                    .addComponent(painelSJF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(65, Short.MAX_VALUE)))
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                    .addContainerGap(74, Short.MAX_VALUE)
                    .addComponent(painelRR, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(55, 55, 55)))
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                    .addContainerGap(84, Short.MAX_VALUE)
                    .addComponent(painelPRI, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(45, 45, 45)))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(sjfBotao, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(prioridadeBotao, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(roundRobinBotao, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fcfsBotao, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 55, Short.MAX_VALUE)
                .addComponent(painelFCFS, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel2Layout.createSequentialGroup()
                    .addGap(85, 85, 85)
                    .addComponent(painelSJF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(85, Short.MAX_VALUE)))
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                    .addContainerGap(95, Short.MAX_VALUE)
                    .addComponent(painelRR, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(75, 75, 75)))
            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                    .addContainerGap(105, Short.MAX_VALUE)
                    .addComponent(painelPRI, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(65, 65, 65)))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    private void mensagemPopUp(String mensagem){
        JFrame execao = new JFrame();   
        execao.setSize(500, 200);        
        execao.setLocationRelativeTo(null); 
        execao.setVisible(true);
        
        JLabel erro = new JLabel();
        erro.setText(mensagem);
        erro.setBounds(125,0,250,100);
        erro.setFont(new java.awt.Font("Dialog", 1, 14));
        erro.setHorizontalAlignment(SwingConstants.CENTER);
        execao.add(erro);
        
        JButton voltar = new javax.swing.JButton("OK");
        voltar.setBounds(200,100,100, 40);
        execao.add(voltar);
        
        JPanel painel = new JPanel();
        painel.setSize(500, 200);
        painel.setBackground(Color.white);
        execao.add(painel);
        
        voltar.addActionListener((java.awt.event.ActionEvent evt1) -> {
            execao.setVisible(false);
        });
    }
    
    private void zeraTudo(char opcao){
        int linha=0;
        switch (opcao) {
            case 'f':
                for (int i=0; i<25; i++) {
                    tabelaProcessosFCFS.setValueAt(null, linha, 0);
                    tabelaProcessosFCFS.setValueAt(null, linha, 1);
                    tabelaProcessosFCFS.setValueAt(null, linha, 2);
                    tabelaProcessosFCFS.setValueAt(null, linha, 3);
                    linha++;
                }   break;
            case 's':
                for (int i=0; i<25; i++) {
                    tabelaProcessosPRONTOSsjf.setValueAt(null, linha, 0);
                    tabelaProcessosPRONTOSsjf.setValueAt(null, linha, 1);
                    tabelaProcessosPRONTOSsjf.setValueAt(null, linha, 2);
                    linha++;
                }   
                linha = 0;
                for (int i=0; i<25; i++) {
                    tabelaProcessosBLOQUEADOSsjf.setValueAt(null, linha, 0);
                    tabelaProcessosBLOQUEADOSsjf.setValueAt(null, linha, 1);
                    tabelaProcessosBLOQUEADOSsjf.setValueAt(null, linha, 2);
                    tabelaProcessosBLOQUEADOSsjf.setValueAt(null, linha, 3);
                    linha++;
                }   
                break;
            case 'r':
                for (int i=0; i<25; i++) {
                    tabelaProcessosPRONTOSrr.setValueAt(null, linha, 0);
                    tabelaProcessosPRONTOSrr.setValueAt(null, linha, 1);
                    tabelaProcessosPRONTOSrr.setValueAt(null, linha, 2);
                    linha++;
                }   
                linha = 0;
                for (int i=0; i<25; i++) {
                    tabelaProcessosBLOQUEADOSrr.setValueAt(null, linha, 0);
                    tabelaProcessosBLOQUEADOSrr.setValueAt(null, linha, 1);
                    tabelaProcessosBLOQUEADOSrr.setValueAt(null, linha, 2);
                    tabelaProcessosBLOQUEADOSrr.setValueAt(null, linha, 3);
                    linha++;
                }   
                break;
            case 'p':
                for (int i=0; i<25; i++) {
                    tabelaProcessosPRONTOSpri.setValueAt(null, linha, 0);
                    tabelaProcessosPRONTOSpri.setValueAt(null, linha, 1);
                    tabelaProcessosPRONTOSpri.setValueAt(null, linha, 2);
                    tabelaProcessosPRONTOSpri.setValueAt(null, linha, 3);
                    linha++;
                }   
                linha = 0;
                for (int i=0; i<25; i++) {
                    tabelaProcessosBLOQUEADOSpri.setValueAt(null, linha, 0);
                    tabelaProcessosBLOQUEADOSpri.setValueAt(null, linha, 1);
                    tabelaProcessosBLOQUEADOSpri.setValueAt(null, linha, 2);
                    linha++;
                }   
                break;
            default:
                break;
        }
    }
    
    private void sjfBotaoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sjfBotaoActionPerformed
        instanciaSJF = false;
        painelSJF.setVisible(true);
        fcfsBotao.setEnabled(false);
        roundRobinBotao.setEnabled(false);
        prioridadeBotao.setEnabled(false);
    }//GEN-LAST:event_sjfBotaoActionPerformed

    private void fcfsBotaoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fcfsBotaoActionPerformed
        controller.instanciaFCFS();
        painelFCFS.setVisible(true);
        roundRobinBotao.setEnabled(false);
        sjfBotao.setEnabled(false);
        prioridadeBotao.setEnabled(false);
        
    // TODO add your handling code here:
    }//GEN-LAST:event_fcfsBotaoActionPerformed

    private void prioridadeBotaoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_prioridadeBotaoActionPerformed
        instanciaPRI = false;
        painelPRI.setVisible(true);
        fcfsBotao.setEnabled(false);
        roundRobinBotao.setEnabled(false);
        sjfBotao.setEnabled(false);
    }//GEN-LAST:event_prioridadeBotaoActionPerformed

    private void roundRobinBotaoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_roundRobinBotaoActionPerformed
        instanciaRR = false;
        painelRR.setVisible(true);
        fcfsBotao.setEnabled(false);
        sjfBotao.setEnabled(false);
        prioridadeBotao.setEnabled(false);
    }//GEN-LAST:event_roundRobinBotaoActionPerformed

    private void tempoDeExecucaoTEXTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tempoDeExecucaoTEXTActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tempoDeExecucaoTEXTActionPerformed

    private void cpuRADIOfcfsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cpuRADIOfcfsActionPerformed
        ioRADIOfcfs.setSelected(false);
    }//GEN-LAST:event_cpuRADIOfcfsActionPerformed

    private void ioRADIOfcfsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ioRADIOfcfsActionPerformed
        cpuRADIOfcfs.setSelected(false);
    }//GEN-LAST:event_ioRADIOfcfsActionPerformed
    
    private void setValorTabelaFCFS(LinkedList<Processo> listaProcessos, LinkedList<Integer> listaTempo){
        zeraTudo('f');
        int linha=0;
        for(Processo pro : listaProcessos){
            tabelaProcessosFCFS.setValueAt(pro.getNome(), linha, 0);
            tabelaProcessosFCFS.setValueAt(pro.getTempo(), linha, 1);
            tabelaProcessosFCFS.setValueAt(pro.getTipo(), linha, 2);
            tabelaProcessosFCFS.setValueAt(listaTempo.get(linha), linha, 3);
            linha++;
        }    
    }
    
    private void setValorTabelaSJF(LinkedList<Processo> listaProntos, LinkedList<Processo> listaBloqueados){
        zeraTudo('s');
        int linha=0, cont = 0;
        for(Processo pro : listaProntos){
            tabelaProcessosPRONTOSsjf.setValueAt(pro.getNome(), linha, 0);
            tabelaProcessosPRONTOSsjf.setValueAt(pro.getTempo(), linha, 1);
            tabelaProcessosPRONTOSsjf.setValueAt(pro.getTipo(), linha, 2);
            linha++;
        }
        linha = 0;
        for(Processo block : listaBloqueados){
            tabelaProcessosBLOQUEADOSsjf.setValueAt(block.getNome(), linha, 0);
            tabelaProcessosBLOQUEADOSsjf.setValueAt(block.getTempo(), linha, 1);
            tabelaProcessosBLOQUEADOSsjf.setValueAt(block.getTipo(), linha, 2);
            tabelaProcessosBLOQUEADOSsjf.setValueAt(cont += (int) quantumSJF.getValue(), linha, 3);
            linha++;
        } 
    }
    
    private void setValorTabelaPRIORIDADE(LinkedList<Processo> listaProntos, LinkedList<Processo> listaBloqueados){
        zeraTudo('p');
        int linha=0, cont = 0;
        for(Processo pro : listaProntos){
            tabelaProcessosPRONTOSpri.setValueAt(pro.getNome(), linha, 0);
            tabelaProcessosPRONTOSpri.setValueAt(pro.getTempo(), linha, 1);
            tabelaProcessosPRONTOSpri.setValueAt(pro.getTipo(), linha, 2);
            tabelaProcessosPRONTOSpri.setValueAt(pro.getPrioridade(), linha, 3);
            linha++;
        }
        linha = 0;
        for(Processo block : listaBloqueados){
            tabelaProcessosBLOQUEADOSpri.setValueAt(block.getNome(), linha, 0);
            tabelaProcessosBLOQUEADOSpri.setValueAt(block.getTempo(), linha, 1);
            tabelaProcessosBLOQUEADOSpri.setValueAt(block.getTipo(), linha, 2);
            linha++;
        } 
    }
    
    private void setValorTabelaRR(LinkedList<Processo> listaProntos, LinkedList<Processo> listaBloqueados, LinkedList<Integer> tempoRestante){
        zeraTudo('r');
        int linha=0;
        for(Processo pro : listaProntos){
            tabelaProcessosPRONTOSrr.setValueAt(pro.getNome(), linha, 0);
            tabelaProcessosPRONTOSrr.setValueAt(pro.getTempo(), linha, 1);
            tabelaProcessosPRONTOSrr.setValueAt(pro.getTipo(), linha, 2);
            linha++;
        }
        linha = 0;
        for(Processo block : listaBloqueados){
            tabelaProcessosBLOQUEADOSrr.setValueAt(block.getNome(), linha, 0);
            tabelaProcessosBLOQUEADOSrr.setValueAt(block.getTempo(), linha, 1);
            tabelaProcessosBLOQUEADOSrr.setValueAt(block.getTipo(), linha, 2);
            tabelaProcessosBLOQUEADOSrr.setValueAt(tempoRestante.get(linha), linha, 3);
            linha++;
        }
    }

    private void adicionarBOTAOfcfsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_adicionarBOTAOfcfsActionPerformed
        try{
            if(cpuRADIOfcfs.isSelected())
                controller.adicionarFCFS(Integer.valueOf(tempoDeExecucaoTEXT.getText()), "CPU");
            else if(ioRADIOfcfs.isSelected())
                controller.adicionarFCFS(Integer.valueOf(tempoDeExecucaoTEXT.getText()), "IO");
            else
                mensagemPopUp("Selecione uma das opções");
        }catch(NumberFormatException e){
            mensagemPopUp("Insira um valor valido");
        }
        tempoDeExecucaoTEXT.setText(null);
        setValorTabelaFCFS(controller.retornaListaFCFS(), controller.retornaListaTempoFCFS());
        if(controller.retornaListaFCFS().size()>0)  avancarBOTAOfcfs.setEnabled(true);
    }//GEN-LAST:event_adicionarBOTAOfcfsActionPerformed

    private void removerBOTAOfcfsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removerBOTAOfcfsActionPerformed
        controller.removerFCFS();
        setValorTabelaFCFS(controller.retornaListaFCFS(), controller.retornaListaTempoFCFS());
    }//GEN-LAST:event_removerBOTAOfcfsActionPerformed

    private void listaSugeridaBOTAOfcfsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_listaSugeridaBOTAOfcfsActionPerformed
        controller.listaSugeridaFCFS();
        setValorTabelaFCFS(controller.retornaListaFCFS(), controller.retornaListaTempoFCFS());
        avancarBOTAOfcfs.setEnabled(true);
    }//GEN-LAST:event_listaSugeridaBOTAOfcfsActionPerformed

    private void avancarBOTAOfcfsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_avancarBOTAOfcfsActionPerformed
        if(controller.retornaListaFCFS().size()<=0){
            mensagemPopUp("Fim de Simulação");
            tempoDeExecucaoTEXTOfcfs.setText("Tempo Execução: " + controller.retornaTempoMedioFCFS());
            avancarBOTAOfcfs.setEnabled(false);
        }
        else{
            Processo processo = controller.executarFCFS();
            processoFinalizadoTEXTOfcfs.setText("Nome: "+processo.getNome());
            tempoDeExecucaoTEXTOafcfs.setText("Tempo de Execução: "+processo.getTempo());
            setValorTabelaFCFS(controller.retornaListaFCFS(), controller.retornaListaTempoFCFS());
            tempoTotal += processo.getTempo();
            tempoDeExecucaoLABEL2fcfs.setText(""+tempoTotal);
        }
        
    }//GEN-LAST:event_avancarBOTAOfcfsActionPerformed

    private void tempoDeExecucaoTEXTsjfActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tempoDeExecucaoTEXTsjfActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tempoDeExecucaoTEXTsjfActionPerformed

    private void cpuRADIOsjfActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cpuRADIOsjfActionPerformed
        ioRADIOsjf.setSelected(false);
    }//GEN-LAST:event_cpuRADIOsjfActionPerformed

    private void ioRADIOsjfActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ioRADIOsjfActionPerformed
        cpuRADIOsjf.setSelected(false);
    }//GEN-LAST:event_ioRADIOsjfActionPerformed

    private void adicionarBOTAOsjfActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_adicionarBOTAOsjfActionPerformed
        if(!instanciaSJF){
            controller.instanciaSJF( (int) quantumSJF.getValue());
            instanciaSJF = true;
            quantumSJF.setEnabled(false);
        }
        try{
            if(cpuRADIOsjf.isSelected())
                controller.adicionarSJF(Integer.valueOf(tempoDeExecucaoTEXTsjf.getText()), "CPU");
            else if(ioRADIOsjf.isSelected())
                controller.adicionarSJF(Integer.valueOf(tempoDeExecucaoTEXTsjf.getText()), "IO");
            else
                mensagemPopUp("Selecione uma das opções");
        }catch(NumberFormatException e){
            mensagemPopUp("Insira um valor valido");
        }
        tempoDeExecucaoTEXTsjf.setText(null);
        setValorTabelaSJF(controller.retornaListaProntosSJF(), controller.retornaListaBloqueadosSJF());
        if(controller.retornaListaProntosSJF().size()>0)  avancarBOTAOsjf.setEnabled(true);
    }//GEN-LAST:event_adicionarBOTAOsjfActionPerformed

    private void removerBOTAOsjfActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removerBOTAOsjfActionPerformed
        controller.removerSJF();
        setValorTabelaSJF(controller.retornaListaProntosSJF(), controller.retornaListaBloqueadosSJF());
    }//GEN-LAST:event_removerBOTAOsjfActionPerformed

    private void listaSugeridaBOTAOsjfActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_listaSugeridaBOTAOsjfActionPerformed
        if(!instanciaSJF){
            controller.instanciaSJF( (int) quantumSJF.getValue());
            instanciaSJF = true;
            quantumSJF.setEnabled(false);
        }
        controller.listaSugeridaSJF();
        setValorTabelaSJF(controller.retornaListaProntosSJF(), controller.retornaListaBloqueadosSJF());
        avancarBOTAOsjf.setEnabled(true);
    }//GEN-LAST:event_listaSugeridaBOTAOsjfActionPerformed

    private void avancarBOTAOsjfActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_avancarBOTAOsjfActionPerformed
        if(controller.retornaListaProntosSJF().size()<=0 && controller.retornaListaBloqueadosSJF().size()<=0){
            mensagemPopUp("Fim de Simulação");
            tempoRespostaTEXTOsjf.setText("Tempo Resposta: "+ controller.retornaTempoMedioSJF());
            avancarBOTAOsjf.setEnabled(false);
        }else{
            Processo processo;
            processo = controller.executarSJF();
            if(processo != null){
                processoFinalizadoTEXTOsjf.setText("Nome: "+processo.getNome());
                tempoDeExecucaoTEXTOasjf.setText("Tempo de Execução: "+processo.getTempo());
                controller.calculaTempoMedioSJF();
            }
            tempoTotalDeExecucaoSJF.setText(String.valueOf(controller.retornaTempoTotalSJF()));
            setValorTabelaSJF(controller.retornaListaProntosSJF(), controller.retornaListaBloqueadosSJF());
        }  
    }//GEN-LAST:event_avancarBOTAOsjfActionPerformed

    private void tempoDeExecucaoTEXTrbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tempoDeExecucaoTEXTrbActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tempoDeExecucaoTEXTrbActionPerformed

    private void cpuRADIOrrActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cpuRADIOrrActionPerformed
        ioRADIOrr.setSelected(false);
    }//GEN-LAST:event_cpuRADIOrrActionPerformed

    private void ioRADIOrrActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ioRADIOrrActionPerformed
        cpuRADIOrr.setSelected(false);
    }//GEN-LAST:event_ioRADIOrrActionPerformed

    private void adicionarBOTAOrrActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_adicionarBOTAOrrActionPerformed
        if(!instanciaRR){
            controller.instanciaRR( (int) quantumRR.getValue());
            instanciaRR = true;
            quantumRR.setEnabled(false);
        }
        try{
            if(cpuRADIOrr.isSelected())
                controller.adicionarRR(Integer.valueOf(tempoDeExecucaoTEXTrb.getText()), "CPU");
            else if(ioRADIOrr.isSelected())
                controller.adicionarRR(Integer.valueOf(tempoDeExecucaoTEXTrb.getText()), "IO");
            else
                mensagemPopUp("Selecione uma das opções");
        }catch(NumberFormatException e){
            mensagemPopUp("Insira um valor valido");
        }
        tempoDeExecucaoTEXTrb.setText(null);
        setValorTabelaRR(controller.retornaListaProntosRR(), controller.retornaListaBloqueadosRR(), controller.retornaListaTempoRestanteRR());
        if(controller.retornaListaProntosRR().size()>0)  avancarBOTAOrr.setEnabled(true);
    }//GEN-LAST:event_adicionarBOTAOrrActionPerformed

    private void removerBOTAOrrActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removerBOTAOrrActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_removerBOTAOrrActionPerformed

    private void listaSugeridaBOTAOrrActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_listaSugeridaBOTAOrrActionPerformed
        if(!instanciaRR){
            controller.instanciaRR( (int) quantumRR.getValue());
            instanciaRR = true;
            quantumRR.setEnabled(false);
        }
        controller.listaSugeridaRR();
        setValorTabelaRR(controller.retornaListaProntosRR(), controller.retornaListaBloqueadosRR(), controller.retornaListaTempoRestanteRR());
        avancarBOTAOrr.setEnabled(true);
    }//GEN-LAST:event_listaSugeridaBOTAOrrActionPerformed

    private void avancarBOTAOrrActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_avancarBOTAOrrActionPerformed
        if(controller.retornaListaProntosRR().size()<=0 && controller.retornaListaBloqueadosRR().size()<=0){
            mensagemPopUp("Fim de Simulação");
            tempoRespostaTEXTOrr.setText("Tempo Resposta: "+controller.retornaTempoMedioRR());
            avancarBOTAOrr.setEnabled(false);
        }else{
            Processo processo;
            processo = controller.executarRR();
            if(processo != null){
                processoFinalizadoTEXTOrr.setText("Nome: "+processo.getNome());
                tempoDeExecucaoTEXTOrr.setText("Tempo de Execução: "+processo.getTempo());
                controller.calculaTempoMedioRR();
            }
            tempoTotalDeExecucaoRR.setText(String.valueOf(controller.retornaTotalUnidadeDeTempoRR()));
            setValorTabelaRR(controller.retornaListaProntosRR(), controller.retornaListaBloqueadosRR(), controller.retornaListaTempoRestanteRR());
        }
    }//GEN-LAST:event_avancarBOTAOrrActionPerformed
    
    private void resetarTudo(){
        controller.instanciaFCFS();
        instanciaPRI = false;
        instanciaRR = false;
        instanciaSJF = false;
        painelFCFS.setVisible(false);
        painelRR.setVisible(false);
        painelSJF.setVisible(false);
        painelPRI.setVisible(false);
        zeraTudo('f');
        zeraTudo('s');
        zeraTudo('r');
        zeraTudo('p');
        sjfBotao.setEnabled(true);
        fcfsBotao.setEnabled(true);
        roundRobinBotao.setEnabled(true);
        prioridadeBotao.setEnabled(true);
        quantumRR.setEnabled(true);
        quantumSJF.setEnabled(true);
        quantumPRI.setEnabled(true);
        tempoTotal = 0;
        tempoTotalSJF = 0;
        tempoTotalDeExecucaoRR.setText("0");
        processoFinalizadoTEXTOrr.setText("Nome: ");
        tempoDeExecucaoTEXTOrr.setText("Tempo de execução: ");
        tempoDeExecucaoLABEL2fcfs.setText("0");
        processoFinalizadoTEXTOfcfs.setText("Nome: ");
        tempoDeExecucaoTEXTOafcfs.setText("Tempo de execução: ");
        tempoTotalDeExecucaoSJF.setText("0");
        processoFinalizadoTEXTOsjf.setText("Nome: ");
        tempoDeExecucaoTEXTOasjf.setText("Tempo de execução: ");
        tempoTotalDeExecucaoPRI.setText("0");
        tempoRespostaTEXTOrr.setText("Tempo Resposta: ");
        tempoRespostaTEXTOsjf.setText("Tempo Resposta: ");
    }
    
    private void voltarBOTARfcfsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_voltarBOTARfcfsActionPerformed
        resetarTudo(); 
    }//GEN-LAST:event_voltarBOTARfcfsActionPerformed

    private void voltarBOTAOsjfActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_voltarBOTAOsjfActionPerformed
        resetarTudo();
    }//GEN-LAST:event_voltarBOTAOsjfActionPerformed

    private void voltarBOTAOrrActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_voltarBOTAOrrActionPerformed
        resetarTudo();
    }//GEN-LAST:event_voltarBOTAOrrActionPerformed

    private void voltarBOTAOpriActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_voltarBOTAOpriActionPerformed
        resetarTudo();
    }//GEN-LAST:event_voltarBOTAOpriActionPerformed

    private void avancarBOTAOpriActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_avancarBOTAOpriActionPerformed
        if(controller.retornaListaProntosPRIORIDADE().size()<=0 && controller.retornaListaBloqueadosPRIORIDADE().size()<=0){
            mensagemPopUp("Fim de Simulação");
            avancarBOTAOpri.setEnabled(false);
        }else{
            controller.executarPRIORIDADE();
            tempoTotalDeExecucaoPRI.setText(String.valueOf(controller.retornaUnidadeTempoPRIORIDADE()));
            setValorTabelaPRIORIDADE(controller.retornaListaProntosPRIORIDADE(), controller.retornaListaBloqueadosPRIORIDADE());
        }
    }//GEN-LAST:event_avancarBOTAOpriActionPerformed

    private void listaSugeridaBOTAOpriActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_listaSugeridaBOTAOpriActionPerformed
        if(!instanciaPRI){
            controller.instanciaPRIORIDADE( (int) quantumPRI.getValue());
            instanciaPRI = true;
            quantumPRI.setEnabled(false);
        }
        controller.listaSugeridaPRIORIDADE();
        setValorTabelaPRIORIDADE(controller.retornaListaProntosPRIORIDADE(), controller.retornaListaBloqueadosPRIORIDADE());
        avancarBOTAOpri.setEnabled(true);
    }//GEN-LAST:event_listaSugeridaBOTAOpriActionPerformed

    private void adicionarBOTAOpriActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_adicionarBOTAOpriActionPerformed
        if(!instanciaPRI){
            controller.instanciaPRIORIDADE( (int) quantumPRI.getValue());
            instanciaPRI = true;
            quantumPRI.setEnabled(false);
        }
        
        String tipo="";
        if(cpuRADIOpri.isSelected())
            tipo = "CPU";
        else if(ioRADIOpri.isSelected())
            tipo = "IO";
        
        try{
            if(priRADIO0.isSelected())
                controller.adicionarPRIORIDADE(Integer.valueOf(tempoDeExecucaoTEXTpri.getText()), tipo, 0);
            else if(priRADIO1.isSelected())
                controller.adicionarPRIORIDADE(Integer.valueOf(tempoDeExecucaoTEXTpri.getText()), tipo, 1);
            else if(priRADIO2.isSelected())
                controller.adicionarPRIORIDADE(Integer.valueOf(tempoDeExecucaoTEXTpri.getText()), tipo, 2);
            else if(priRADIO3.isSelected())
                controller.adicionarPRIORIDADE(Integer.valueOf(tempoDeExecucaoTEXTpri.getText()), tipo, 3);
            else
            mensagemPopUp("Selecione uma das opções");
        }catch(NumberFormatException e){
            mensagemPopUp("Insira um valor valido");
        }
        tempoDeExecucaoTEXTpri.setText(null);
        setValorTabelaPRIORIDADE(controller.retornaListaProntosPRIORIDADE(), controller.retornaListaBloqueadosPRIORIDADE());
        if(controller.retornaListaProntosPRIORIDADE().size()>0)
        avancarBOTAOpri.setEnabled(true);
    }//GEN-LAST:event_adicionarBOTAOpriActionPerformed

    private void ioRADIOpriActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ioRADIOpriActionPerformed
        cpuRADIOpri.setSelected(false);
    }//GEN-LAST:event_ioRADIOpriActionPerformed

    private void cpuRADIOpriActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cpuRADIOpriActionPerformed
        ioRADIOpri.setSelected(false);
    }//GEN-LAST:event_cpuRADIOpriActionPerformed

    private void tempoDeExecucaoTEXTpriActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tempoDeExecucaoTEXTpriActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tempoDeExecucaoTEXTpriActionPerformed

    private void priRADIO0ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_priRADIO0ActionPerformed
        priRADIO1.setSelected(false);
        priRADIO2.setSelected(false);
        priRADIO3.setSelected(false);
    }//GEN-LAST:event_priRADIO0ActionPerformed

    private void priRADIO1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_priRADIO1ActionPerformed
        priRADIO0.setSelected(false);
        priRADIO2.setSelected(false);
        priRADIO3.setSelected(false);
    }//GEN-LAST:event_priRADIO1ActionPerformed

    private void priRADIO2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_priRADIO2ActionPerformed
        priRADIO0.setSelected(false);
        priRADIO1.setSelected(false);
        priRADIO3.setSelected(false);
    }//GEN-LAST:event_priRADIO2ActionPerformed

    private void priRADIO3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_priRADIO3ActionPerformed
        priRADIO0.setSelected(false);
        priRADIO1.setSelected(false);
        priRADIO2.setSelected(false);
    }//GEN-LAST:event_priRADIO3ActionPerformed

    public void startView() {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ViewMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ViewMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ViewMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ViewMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new ViewMenu().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton adicionarBOTAOfcfs;
    private javax.swing.JButton adicionarBOTAOpri;
    private javax.swing.JButton adicionarBOTAOrr;
    private javax.swing.JButton adicionarBOTAOsjf;
    private javax.swing.JButton avancarBOTAOfcfs;
    private javax.swing.JButton avancarBOTAOpri;
    private javax.swing.JButton avancarBOTAOrr;
    private javax.swing.JButton avancarBOTAOsjf;
    private javax.swing.JRadioButton cpuRADIOfcfs;
    private javax.swing.JRadioButton cpuRADIOpri;
    private javax.swing.JRadioButton cpuRADIOrr;
    private javax.swing.JRadioButton cpuRADIOsjf;
    private javax.swing.JButton fcfsBotao;
    private javax.swing.JRadioButton ioRADIOfcfs;
    private javax.swing.JRadioButton ioRADIOpri;
    private javax.swing.JRadioButton ioRADIOrr;
    private javax.swing.JRadioButton ioRADIOsjf;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JScrollPane jScrollPane9;
    private javax.swing.JButton listaSugeridaBOTAOfcfs;
    private javax.swing.JButton listaSugeridaBOTAOpri;
    private javax.swing.JButton listaSugeridaBOTAOrr;
    private javax.swing.JButton listaSugeridaBOTAOsjf;
    private javax.swing.JPanel painelFCFS;
    private javax.swing.JPanel painelPRI;
    private javax.swing.JPanel painelRR;
    private javax.swing.JPanel painelSJF;
    private javax.swing.JRadioButton priRADIO0;
    private javax.swing.JRadioButton priRADIO1;
    private javax.swing.JRadioButton priRADIO2;
    private javax.swing.JRadioButton priRADIO3;
    private javax.swing.JButton prioridadeBotao;
    private javax.swing.JLabel processoFinalizadoTEXTO1fcfs;
    private javax.swing.JLabel processoFinalizadoTEXTO1rr;
    private javax.swing.JLabel processoFinalizadoTEXTO1sjf;
    private javax.swing.JLabel processoFinalizadoTEXTOfcfs;
    private javax.swing.JLabel processoFinalizadoTEXTOrr;
    private javax.swing.JLabel processoFinalizadoTEXTOsjf;
    private javax.swing.JSpinner quantumPRI;
    private javax.swing.JSpinner quantumRR;
    private javax.swing.JSpinner quantumSJF;
    private javax.swing.JLabel quantumTEXTOpri;
    private javax.swing.JLabel quantumTEXTOpri1;
    private javax.swing.JLabel quantumTEXTOrr;
    private javax.swing.JLabel quantumTEXTOsjf;
    private javax.swing.JButton removerBOTAOfcfs;
    private javax.swing.JButton removerBOTAOrr;
    private javax.swing.JButton removerBOTAOsjf;
    private javax.swing.JButton roundRobinBotao;
    private javax.swing.JButton sjfBotao;
    private javax.swing.JTable tabelaProcessosBLOQUEADOSpri;
    private javax.swing.JTable tabelaProcessosBLOQUEADOSrr;
    private javax.swing.JTable tabelaProcessosBLOQUEADOSsjf;
    private javax.swing.JTable tabelaProcessosFCFS;
    private javax.swing.JTable tabelaProcessosPRONTOSpri;
    private javax.swing.JTable tabelaProcessosPRONTOSrr;
    private javax.swing.JTable tabelaProcessosPRONTOSsjf;
    private javax.swing.JLabel tempoDeExecucaoLABEL2fcfs;
    private javax.swing.JLabel tempoDeExecucaoLABELfcfs;
    private javax.swing.JLabel tempoDeExecucaoLABELpri;
    private javax.swing.JLabel tempoDeExecucaoLABELrr;
    private javax.swing.JLabel tempoDeExecucaoLABELsjf;
    private javax.swing.JTextField tempoDeExecucaoTEXT;
    private javax.swing.JLabel tempoDeExecucaoTEXTOafcfs;
    private javax.swing.JLabel tempoDeExecucaoTEXTOasjf;
    private javax.swing.JLabel tempoDeExecucaoTEXTOfcfs;
    private javax.swing.JLabel tempoDeExecucaoTEXTOrr;
    private javax.swing.JTextField tempoDeExecucaoTEXTpri;
    private javax.swing.JTextField tempoDeExecucaoTEXTrb;
    private javax.swing.JTextField tempoDeExecucaoTEXTsjf;
    private javax.swing.JLabel tempoRespostaTEXTOrr;
    private javax.swing.JLabel tempoRespostaTEXTOsjf;
    private javax.swing.JLabel tempoTotalDeExecucaoLABELfcfs;
    private javax.swing.JLabel tempoTotalDeExecucaoLABELpri;
    private javax.swing.JLabel tempoTotalDeExecucaoLABELpri1;
    private javax.swing.JLabel tempoTotalDeExecucaoLABELpri2;
    private javax.swing.JLabel tempoTotalDeExecucaoLABELpri3;
    private javax.swing.JLabel tempoTotalDeExecucaoLABELpri4;
    private javax.swing.JLabel tempoTotalDeExecucaoLABELpri5;
    private javax.swing.JLabel tempoTotalDeExecucaoLABELpri6;
    private javax.swing.JLabel tempoTotalDeExecucaoLABELrr;
    private javax.swing.JLabel tempoTotalDeExecucaoLABELsjf;
    private javax.swing.JLabel tempoTotalDeExecucaoPRI;
    private javax.swing.JLabel tempoTotalDeExecucaoRR;
    private javax.swing.JLabel tempoTotalDeExecucaoSJF;
    private javax.swing.JLabel tipoDeProcessoLABELfcfs;
    private javax.swing.JLabel tipoDeProcessoLABELpri;
    private javax.swing.JLabel tipoDeProcessoLABELrr;
    private javax.swing.JLabel tipoDeProcessoLABELsjf;
    private javax.swing.JButton voltarBOTAOpri;
    private javax.swing.JButton voltarBOTAOrr;
    private javax.swing.JButton voltarBOTAOsjf;
    private javax.swing.JButton voltarBOTARfcfs;
    // End of variables declaration//GEN-END:variables
}